package com.backbase.customer_master.application.mapper;


import com.backbase.customer_master.domain.model.Address;
import com.backbase.customer_master.domain.model.Customer;
import com.backbase.customer_master.presentation.dto.AddressDto;
import org.mapstruct.*;

import java.util.List;

/**
 * MapStruct mapper for Address entity and DTOs
 */
@Mapper(
    componentModel = "spring",
    nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
    nullValueCheckStrategy = NullValueCheckStrategy.ALWAYS
)
public interface AddressMapper {

    /**
     * Entity to Response DTO
     */
    @Mapping(target = "customerId", source = "customer.customerId")
    AddressDto.Response toResponse(Address address);

    /**
     * List of entities to list of response DTOs
     */
    List<AddressDto.Response> toResponseList(List<Address> addresses);

    /**
     * Entity to Summary DTO
     */
    AddressDto.Summary toSummary(Address address);

    /**
     * List of entities to list of summary DTOs
     */
    List<AddressDto.Summary> toSummaryList(List<Address> addresses);

    /**
     * Create Request DTO to Entity
     */
    @Mapping(target = "addressId", ignore = true) // Will be generated by UUID
    @Mapping(target = "customer", ignore = true) // Will be set separately
    @Mapping(target = "isDefault", source = "isDefault", defaultValue = "false")
    @Mapping(target = "isActive", constant = "true")
    @Mapping(target = "validFrom", ignore = true) // Will be set to current time
    @Mapping(target = "validTo", ignore = true)
    @Mapping(target = "createdDate", ignore = true)
    @Mapping(target = "lastModifiedDate", ignore = true)
    @Mapping(target = "createdBy", ignore = true)
    @Mapping(target = "lastModifiedBy", ignore = true)
    Address toEntity(AddressDto.CreateRequest request);

    /**
     * Update existing entity from Update Request DTO
     */
    @Mapping(target = "addressId", ignore = true)
    @Mapping(target = "customer", ignore = true)
    @Mapping(target = "addressType", ignore = true) // Cannot change type after creation
    @Mapping(target = "isActive", ignore = true)
    @Mapping(target = "validFrom", ignore = true)
    @Mapping(target = "validTo", ignore = true)
    @Mapping(target = "createdDate", ignore = true)
    @Mapping(target = "lastModifiedDate", ignore = true)
    @Mapping(target = "createdBy", ignore = true)
    @Mapping(target = "lastModifiedBy", ignore = true)
    void updateEntity(@MappingTarget Address address, AddressDto.UpdateRequest request);

    /**
     * Create entity with customer reference
     */
    default Address toEntityWithCustomer(AddressDto.CreateRequest request, Customer customer) {
        Address address = toEntity(request);
        address.setCustomer(customer);
        return address;
    }

    /**
     * Post-processing method to handle business logic after mapping
     */
    @AfterMapping
    default void enrichAddressResponse(@MappingTarget AddressDto.Response response, Address address) {
        // Add any business logic here if needed
        // For example, calculate derived fields, format data, etc.
    }

    /**
     * Post-processing method to enrich summary with additional info
     */
    @AfterMapping
    default void enrichAddressSummary(@MappingTarget AddressDto.Summary summary, Address address) {
        // Add any business logic here if needed
    }

    /**
     * Pre-processing method to handle business logic before mapping
     */
    @BeforeMapping
    default void prepareAddressEntity(AddressDto.CreateRequest request, @MappingTarget Address address) {
        // Add any business logic here if needed
        // For example, validate data, set defaults, etc.
        if (request.getIsDefault() == null) {
            request.setIsDefault(false);
        }
    }
}