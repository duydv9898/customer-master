package com.backbase.customer_master.application.mapper;


import com.backbase.customer_master.domain.model.Customer;
import com.backbase.customer_master.domain.model.Identification;
import com.backbase.customer_master.presentation.dto.IdentificationDto;
import org.mapstruct.*;

import java.time.LocalDate;
import java.util.List;

/**
 * MapStruct mapper for Identification entity and DTOs
 */
@Mapper(
    componentModel = "spring",
    nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
    nullValueCheckStrategy = NullValueCheckStrategy.ALWAYS
)
public interface IdentificationMapper {

    /**
     * Entity to Response DTO
     */
    @Mapping(target = "customerId", source = "customer.customerId")
    @Mapping(target = "identificationNumberHash", ignore = true) // Don't expose hash
    @Mapping(target = "ocrExtractedData", ignore = true) // Don't expose OCR data in normal response
    IdentificationDto.Response toResponse(Identification identification);

    /**
     * List of entities to list of response DTOs
     */
    List<IdentificationDto.Response> toResponseList(List<Identification> identifications);

    /**
     * Entity to Summary DTO
     */
    @Mapping(target = "isExpired", expression = "java(identification.isExpired())")
    @Mapping(target = "isExpiringSoon", expression = "java(identification.isExpiringSoon(30))")
    IdentificationDto.Summary toSummary(Identification identification);

    /**
     * List of entities to list of summary DTOs
     */
    List<IdentificationDto.Summary> toSummaryList(List<Identification> identifications);

    /**
     * Create Request DTO to Entity
     */
    @Mapping(target = "identificationId", ignore = true) // Will be generated by UUID
    @Mapping(target = "customer", ignore = true) // Will be set separately
    @Mapping(target = "identificationNumberHash", ignore = true) // Will be generated
    @Mapping(target = "isDefault", source = "isDefault", defaultValue = "false")
    @Mapping(target = "isVerified", constant = "false")
    @Mapping(target = "verificationDate", ignore = true)
    @Mapping(target = "verificationMethod", ignore = true)
    @Mapping(target = "verificationReference", ignore = true)
    @Mapping(target = "isActive", constant = "true")
    @Mapping(target = "ocrExtractedData", ignore = true)
    @Mapping(target = "riskScore", ignore = true)
    @Mapping(target = "blacklistCheckStatus", ignore = true)
    @Mapping(target = "blacklistCheckDate", ignore = true)
    @Mapping(target = "createdDate", ignore = true)
    @Mapping(target = "lastModifiedDate", ignore = true)
    @Mapping(target = "createdBy", ignore = true)
    @Mapping(target = "lastModifiedBy", ignore = true)
    Identification toEntity(IdentificationDto.CreateRequest request);

    /**
     * Update existing entity from Update Request DTO
     */
    @Mapping(target = "identificationId", ignore = true)
    @Mapping(target = "customer", ignore = true)
    @Mapping(target = "identificationTypeId", ignore = true) // Cannot change type after creation
    @Mapping(target = "identificationNumberHash", ignore = true) // Will be regenerated if number changes
    @Mapping(target = "isVerified", ignore = true) // Keep verification status
    @Mapping(target = "verificationDate", ignore = true)
    @Mapping(target = "verificationMethod", ignore = true)
    @Mapping(target = "verificationReference", ignore = true)
    @Mapping(target = "isActive", ignore = true)
    @Mapping(target = "ocrExtractedData", ignore = true)
    @Mapping(target = "riskScore", ignore = true)
    @Mapping(target = "blacklistCheckStatus", ignore = true)
    @Mapping(target = "blacklistCheckDate", ignore = true)
    @Mapping(target = "createdDate", ignore = true)
    @Mapping(target = "lastModifiedDate", ignore = true)
    @Mapping(target = "createdBy", ignore = true)
    @Mapping(target = "lastModifiedBy", ignore = true)
    void updateEntity(@MappingTarget Identification identification, IdentificationDto.UpdateRequest request);

    /**
     * Create entity with customer reference
     */
    default Identification toEntityWithCustomer(IdentificationDto.CreateRequest request, Customer customer) {
        Identification identification = toEntity(request);
        identification.setCustomer(customer);
        return identification;
    }

    /**
     * Post-processing method to handle business logic after mapping
     */
    @AfterMapping
    default void enrichIdentificationResponse(@MappingTarget IdentificationDto.Response response, Identification identification) {
        // Add any business logic here if needed
        // For example, mask sensitive data, calculate derived fields, etc.

        // Mask identification number for security (show only last 4 digits)
        if (response.getIdentificationNumber() != null && response.getIdentificationNumber().length() > 4) {
            String masked = "*".repeat(response.getIdentificationNumber().length() - 4) +
                           response.getIdentificationNumber().substring(response.getIdentificationNumber().length() - 4);
            response.setIdentificationNumber(masked);
        }
    }

    /**
     * Post-processing method to enrich summary with additional info
     */
    @AfterMapping
    default void enrichIdentificationSummary(@MappingTarget IdentificationDto.Summary summary, Identification identification) {
        // Calculate expiration status
        if (identification.getExpiryDate() != null) {
            LocalDate now = LocalDate.now();
            summary.setIsExpired(identification.getExpiryDate().isBefore(now));
            summary.setIsExpiringSoon(identification.getExpiryDate().isBefore(now.plusDays(30)));
        } else {
            summary.setIsExpired(false);
            summary.setIsExpiringSoon(false);
        }

        // Mask identification number in summary
        if (summary.getIdentificationNumber() != null && summary.getIdentificationNumber().length() > 4) {
            String masked = "*".repeat(summary.getIdentificationNumber().length() - 4) +
                           summary.getIdentificationNumber().substring(summary.getIdentificationNumber().length() - 4);
            summary.setIdentificationNumber(masked);
        }
    }

    /**
     * Pre-processing method to handle business logic before mapping
     */
    @BeforeMapping
    default void prepareIdentificationEntity(IdentificationDto.CreateRequest request, @MappingTarget Identification identification) {
        // Add any business logic here if needed
        // For example, validate data, set defaults, etc.
        if (request.getIsDefault() == null) {
            request.setIsDefault(false);
        }
    }
}